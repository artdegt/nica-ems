openapi: 3.0.0

info:
  title: EMS API
  description: Event Metadata System REST API
  version: 1.0.0

servers:
  - url: http://127.0.0.1:8080/event_api/v1
    description: Local deployment

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

  schemas:

    Storage:
      type: object
      description: Storage used for experiment data files
      properties:
        storage_id:
          type: integer
          example: 4
        storage_name:
          type: string
          example: data1
      required:
        - storage_id
        - storage_name

    Software:
      type: object
      description: Software version used to process files
      properties:
        software_id:
          type: integer
          example: 8
        software_version:
          type: string
          example: "20.1"
      required:
        - software_id
        - software_version

    Reference:
      type: object
      description: Reference to event's storage/file/event_number
      properties:
        storage_name:
          type: string
          example: data1
        file_path:
          type: string
          example: /var/tmp/file1.root
        event_number:
          type: integer
          example: 100000
      required:
        - storage_name
        - file_path
        - event_number

    Parameters:
      description: Map of optional parameters key/values, according to EMS config
      type: object
      # Generally a Map<String, Any>
      properties:
        track_number:
          type: integer
          example: 30

    EventRepr:
      type: object
      description: Single event metadata
      properties:
        reference:
          $ref: '#/components/schemas/Reference'
        software_version:
          type: string
          example: "20.1"
        period_number:
          type: integer   # short
          example: 8
        run_number:
          type: integer
          example: 5000
        parameters:
          $ref: '#/components/schemas/Parameters'
      required:
        - reference
        - software_version
        - period_number
        - run_number
        - parameters

paths:
  /storage:
    get:
      summary: Returns a list of storages.
      # description: Optional extended description in CommonMark or HTML.
      security:
        - basicAuth: []
      responses:
        '200':    # status code
          description: A JSON array of storage objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Storage'

    post:
      summary: Create new storage record
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Storage'

      responses:
        '200':
          description: Created new storage record


  /software:
    get:
      summary: Returns a list of software versions.
      # description: Optional extended description in CommonMark or HTML.
      security:
        - basicAuth: []
      responses:
        '200':    # status code
          description: A JSON array of software version objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Software'

    post:
      summary: Create new software record
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Software'

      responses:
        '200':
          description: Created new software record


  /event:
    get:
      summary: Returns event metadata
      security:
        - basicAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit on the number of events
        - in: query
          name: offset
          schema:
            type: integer
          description: Offset for obtained events (typically used with limit)
        - in: query
          name: software_version
          schema:
            type: string
          description: Software version for events
        - in: query
          name: period_number
          schema:
            type: string
          description: Period number (possibly range) for requested events
        - in: query
          name: run_number
          schema:
            type: string
          description: Run number (possibly range) for requested events

      responses:
        '200': # status code
          description: A JSON array of event objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventRepr'

    post:
      summary: Add event metadata to catalogue
      security:
        - basicAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EventRepr'
      responses:
        '200':
          description: Events were created

